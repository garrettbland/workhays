<%- include('../../partials/page_start', {title: 'Admin Users', description: 'Manage user accounts'}) %>

<div class="max-w-4xl mx-auto mt-12">
	<div class="grid grid-cols-1 md:grid-cols-8 gap-4">
		<%- include('../../partials/admin_sidebar') %>
		<div x-data="adminusers()" x-init="getUsers" class="col-span-1 md:col-span-6">
            <!-- content -->

            <!-- popup -->
            <div x-show="isPopupVisible" class="fixed z-30 top-0 left-0 w-screen h-screen overflow-y-scroll" style="background-color: rgba(0,0,0,0.5);display:none;">
                <div x-on:click.away="closePopup()" class="max-w-5xl w-full bg-white p-4 my-12 mx-auto">
                    <div class="flex justify-between">
                        <div>
                            Details
                        </div>
                        <div x-on:click="closePopup()">
                            Close X
                        </div>
                    </div>
                    <template x-if="currentlySelectedUser">
                        <div>
                            <div>
                                User ID: <span x-html="currentlySelectedUser.id"></span>
                            </div>
                            <div>
                                First: <input x-model:value="currentlySelectedUser.first_name" class="bg-white p-1 ml-1 border border-gray-200"></input>
                            </div>
                            <div>
                                Last: <input x-model:value="currentlySelectedUser.last_name" class="bg-white p-1 ml-1 border border-gray-200"></input>
                            </div>
                            <div>
                                Email: <input x-model:value="currentlySelectedUser.email" class="bg-white p-1 ml-1 border border-gray-200"></input>
                            </div>
                            <div>
                                Role:
                                <select x-model="currentlySelectedUser.role">
                                    <option value="admin" x-bind:selected="currentlySelectedUser.role === 'admin'">Admin</option>
                                    <option value="employer" x-bind:selected="currentlySelectedUser.role === 'employer'">Employer</option>
                                </select>
                            </div>
                            <div>
                                Status:
                                <select x-model="currentlySelectedUser.status">
                                    <option value="pending" x-bind:selected="currentlySelectedUser.status === 'pending'">Pending</option>
                                    <option value="verified" x-bind:selected="currentlySelectedUser.status === 'verified'">Verified</option>
                                    <option value="locked" x-bind:selected="currentlySelectedUser.status === 'locked'">Locked</option>
                                </select>
                            </div>
                            <div>
                                Employer: <span x-text="currentlySelectedUser.employer.title"></span>
                            </div>
                            <div>
                                <div x-show="isUpdating">
                                    Saving changes...
                                </div>
                                <button x-on:click="saveChanges(currentlySelectedUser)">
                                    Update User
                                </button>
                            </div>
                        </div>
                    </template>
                </div>
            </div>

            <div class="flex flex-wrap">
                <template x-if="user_meta">
                    <div class="w-full">
                        Total Users:<span x-text="user_meta.count"></span>
                    </div>
                    <div>
                        Page <span x-text="user_meta.current_page"></span> of
                        <span x-text="user_meta.pages"></span>
                    </div>
                    <div class="w-full flex flex-row">
                        <button x-on:click="prevPage()" x-show="checkPrev()" class="px-2 py-2 bg-gray-400">Prev</button>
                        <button x-on:click="nextPage()" x-show="checkNext()" class="px-2 py-2 bg-gray-400">Next</button>
                    </div>
                </template>
                <div class="w-full flex uppercase text-xs text-gray-600">
                    <div class="w-1/3">
                        Name
                    </div>
                    <div class="w-1/3">
                        Email
                    </div>
                    <div class="w-1/3">
                        Employer
                    </div>
                </div>
                <template x-for="user in users" :key="user">
                    <div x-on:click="showPopup(user)" x-bind:class="getRowClass(user.status)" class="w-full flex justify-between text-gray-800 border-b hover:bg-white cursor-pointer">
                        <div x-text="user.first_name +' '+ user.last_name" class="w-1/3 truncate">

                        </div>
                        <div x-text="user.email" class="w-1/3 truncate">

                        </div>
                        <div x-text="user.employer.title" class="w-1/3 truncate">

                        </div>
                    </div>
                </template>
            </div>

            <!-- content end-->
		</div>
	</div>
</div>

<script>
    function adminusers() {
        return {
            loading: false,
            user_meta: null,
            users: [],
            isPopupVisible: false,
            currentlySelectedUser: null,
            isUpdating: false,
            showPopup: function(user) {
                this.currentlySelectedUser = user
                this.isPopupVisible = true
            },
            closePopup: function() {
                this.currentlySelectedUser = null
                this.isPopupVisible = false
            },
            getRowClass: (status) => {
                if(status === 'pending') return 'bg-orange-400'
                if(status === 'verified') return 'bg-white'
                if(status === 'locked') return 'bg-red-500'
            },
            getUsers: function() {
                var _this = this;
                this.loading = true
                this.fetchUsers(1).then((data) => {
                    _this.loading = false
                    _this.user_meta = data.meta
                    _this.users = data.data
                })
            },
            saveChanges: function(user) {
                var _this = this;
                this.isUpdating = true
                this.updateUser(user).then((data) => {
                    window.alert('update successful')
                    _this.isUpdating = false
                })
            },
            fetchUsers: async function(page) {
                console.log(page)
                const users = await fetch('/api/users?page='+page)
                return users.json()
            },
            updateUser: async function(user) {
                 const update = await fetch('/api/users/'+user.id, {
                     method: 'PUT',
                     headers: {
                        'Content-type': 'application/json; charset=UTF-8'
                        },
                     body: JSON.stringify(user)
                 })
                 return update.json()
            },
            checkPrev: function () {
                if (this.user_meta.current_page > 1) {
                    return true
                } else {
                    return false
                }
            },
            checkNext: function () {
                if (this.user_meta.current_page < this.user_meta.pages) {
                    return true
                } else {
                    return false
                }
            },
            prevPage: function () {
                var _this = this
                this.loading = true
                this.fetchUsers(this.user_meta.current_page - 1).then((data) => {
                    _this.loading = false
                    _this.user_meta = data.meta
                    _this.users = data.data
                })
            },
            nextPage: function () {
                var _this = this
                this.loading = true
                this.fetchUsers(this.user_meta.current_page + 1).then((data) => {
                    console.log(data)
                    _this.loading = false
                    _this.user_meta = data.meta
                    _this.users = data.data
                })
            }
        }
    }
</script>

<%- include('../../partials/page_end') %>